$date
	Sun Feb 25 18:08:59 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module dut $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # WriteDataM [31:0] $end
$var wire 32 $ ResultW [31:0] $end
$var wire 1 % ResultSrcW $end
$var wire 1 & ResultSrcM $end
$var wire 1 ' ResultSrcE $end
$var wire 1 ( RegWriteW $end
$var wire 1 ) RegWriteM $end
$var wire 1 * RegWriteE $end
$var wire 32 + ReadDataW [31:0] $end
$var wire 5 , RS2_E [4:0] $end
$var wire 5 - RS1_E [4:0] $end
$var wire 5 . RD_M [4:0] $end
$var wire 5 / RD_E [4:0] $end
$var wire 5 0 RDW [4:0] $end
$var wire 32 1 RD2_E [31:0] $end
$var wire 32 2 RD1_E [31:0] $end
$var wire 32 3 PCTargetE [31:0] $end
$var wire 1 4 PCSrcE $end
$var wire 32 5 PCPlus4W [31:0] $end
$var wire 32 6 PCPlus4M [31:0] $end
$var wire 32 7 PCPlus4E [31:0] $end
$var wire 32 8 PCPlus4D [31:0] $end
$var wire 32 9 PCE [31:0] $end
$var wire 32 : PCD [31:0] $end
$var wire 1 ; MemWriteM $end
$var wire 1 < MemWriteE $end
$var wire 32 = InstrD [31:0] $end
$var wire 32 > Imm_Ext_E [31:0] $end
$var wire 2 ? ForwardBE [1:0] $end
$var wire 2 @ ForwardAE [1:0] $end
$var wire 1 A BranchE $end
$var wire 32 B ALU_ResultW [31:0] $end
$var wire 32 C ALU_ResultM [31:0] $end
$var wire 1 D ALUSrcE $end
$var wire 3 E ALUControlE [2:0] $end
$scope module Decode $end
$var wire 3 F ALUControlE [2:0] $end
$var wire 1 D ALUSrcE $end
$var wire 1 A BranchE $end
$var wire 32 G Imm_Ext_E [31:0] $end
$var wire 1 < MemWriteE $end
$var wire 32 H PCE [31:0] $end
$var wire 32 I PCPlus4E [31:0] $end
$var wire 32 J RD1_E [31:0] $end
$var wire 32 K RD2_E [31:0] $end
$var wire 5 L RD_E [4:0] $end
$var wire 5 M RS1_E [4:0] $end
$var wire 5 N RS2_E [4:0] $end
$var wire 1 * RegWriteE $end
$var wire 1 ' ResultSrcE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 O ResultW [31:0] $end
$var wire 1 P ResultSrcD $end
$var wire 1 ( RegWriteW $end
$var wire 1 Q RegWriteD $end
$var wire 5 R RDW [4:0] $end
$var wire 32 S RD2_D [31:0] $end
$var wire 32 T RD1_D [31:0] $end
$var wire 32 U PCPlus4D [31:0] $end
$var wire 32 V PCD [31:0] $end
$var wire 1 W MemWriteD $end
$var wire 32 X InstrD [31:0] $end
$var wire 32 Y Imm_Ext_D [31:0] $end
$var wire 2 Z ImmSrcD [1:0] $end
$var wire 1 [ BranchD $end
$var wire 1 \ ALUSrcD $end
$var wire 3 ] ALUControlD [2:0] $end
$var reg 3 ^ ALUControlD_r [2:0] $end
$var reg 1 D ALUSrcD_r $end
$var reg 1 A BranchD_r $end
$var reg 32 _ Imm_Ext_D_r [31:0] $end
$var reg 1 ` MemWriteD_r $end
$var reg 32 a PCD_r [31:0] $end
$var reg 32 b PCPlus4D_r [31:0] $end
$var reg 32 c RD1_D_r [31:0] $end
$var reg 32 d RD2_D_r [31:0] $end
$var reg 5 e RD_D_r [4:0] $end
$var reg 5 f RS1_D_r [4:0] $end
$var reg 5 g RS2_D_r [4:0] $end
$var reg 1 h RegWriteD_r $end
$var reg 1 i ResultSrcD_r $end
$scope module control $end
$var wire 7 j Op [6:0] $end
$var wire 3 k funct3 [2:0] $end
$var wire 7 l funct7 [6:0] $end
$var wire 1 P ResultSrc $end
$var wire 1 Q RegWrite $end
$var wire 1 W MemWrite $end
$var wire 2 m ImmSrc [1:0] $end
$var wire 1 [ Branch $end
$var wire 1 \ ALUSrc $end
$var wire 2 n ALUOp [1:0] $end
$var wire 3 o ALUControl [2:0] $end
$scope module ALU_Decoder $end
$var wire 3 p funct3 [2:0] $end
$var wire 7 q funct7 [6:0] $end
$var wire 7 r op [6:0] $end
$var wire 2 s ALUOp [1:0] $end
$var wire 3 t ALUControl [2:0] $end
$upscope $end
$scope module Main_Decoder $end
$var wire 7 u Op [6:0] $end
$var wire 1 P ResultSrc $end
$var wire 1 Q RegWrite $end
$var wire 1 W MemWrite $end
$var wire 2 v ImmSrc [1:0] $end
$var wire 1 [ Branch $end
$var wire 1 \ ALUSrc $end
$var wire 2 w ALUOp [1:0] $end
$upscope $end
$upscope $end
$scope module extension $end
$var wire 2 x ImmSrc [1:0] $end
$var wire 32 y In [31:0] $end
$var wire 32 z Imm_Ext [31:0] $end
$upscope $end
$scope module rf $end
$var wire 5 { A1 [4:0] $end
$var wire 5 | A2 [4:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 ( WE3 $end
$var wire 32 } WD3 [31:0] $end
$var wire 32 ~ RD2 [31:0] $end
$var wire 32 !" RD1 [31:0] $end
$var wire 5 "" A3 [4:0] $end
$upscope $end
$upscope $end
$scope module Execute $end
$var wire 3 #" ALUControlE [2:0] $end
$var wire 1 D ALUSrcE $end
$var wire 1 A BranchE $end
$var wire 32 $" Imm_Ext_E [31:0] $end
$var wire 1 < MemWriteE $end
$var wire 1 ; MemWriteM $end
$var wire 32 %" PCE [31:0] $end
$var wire 32 &" PCPlus4E [31:0] $end
$var wire 32 '" PCPlus4M [31:0] $end
$var wire 1 4 PCSrcE $end
$var wire 32 (" RD1_E [31:0] $end
$var wire 32 )" RD2_E [31:0] $end
$var wire 5 *" RD_E [4:0] $end
$var wire 5 +" RD_M [4:0] $end
$var wire 1 * RegWriteE $end
$var wire 1 ) RegWriteM $end
$var wire 1 ' ResultSrcE $end
$var wire 1 & ResultSrcM $end
$var wire 32 ," WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 -" ZeroE $end
$var wire 32 ." Src_B_interim [31:0] $end
$var wire 32 /" Src_B [31:0] $end
$var wire 32 0" Src_A [31:0] $end
$var wire 32 1" ResultW [31:0] $end
$var wire 32 2" ResultE [31:0] $end
$var wire 32 3" PCTargetE [31:0] $end
$var wire 2 4" ForwardB_E [1:0] $end
$var wire 2 5" ForwardA_E [1:0] $end
$var wire 32 6" ALU_ResultM [31:0] $end
$var reg 1 7" MemWriteE_r $end
$var reg 32 8" PCPlus4E_r [31:0] $end
$var reg 32 9" RD2_E_r [31:0] $end
$var reg 5 :" RD_E_r [4:0] $end
$var reg 1 ) RegWriteE_r $end
$var reg 32 ;" ResultE_r [31:0] $end
$var reg 1 <" ResultSrcE_r $end
$scope module alu $end
$var wire 3 =" ALUControl [2:0] $end
$var wire 1 >" Carry $end
$var wire 1 ?" OverFlow $end
$var wire 32 @" conv_output [31:0] $end
$var wire 1 -" Zero $end
$var wire 32 A" Sum [31:0] $end
$var wire 32 B" Result [31:0] $end
$var wire 1 C" Negative $end
$var wire 1 D" Cout $end
$var wire 32 E" B [31:0] $end
$var wire 32 F" A [31:0] $end
$scope module c1 $end
$var wire 32 G" Result [31:0] $end
$var wire 32 H" B [31:0] $end
$var wire 32 I" A [31:0] $end
$var reg 4 J" h0 [3:0] $end
$var reg 4 K" h1 [3:0] $end
$var reg 4 L" h2 [3:0] $end
$var reg 4 M" h3 [3:0] $end
$var reg 4 N" x0 [3:0] $end
$var reg 4 O" x1 [3:0] $end
$var reg 4 P" x2 [3:0] $end
$var reg 4 Q" x3 [3:0] $end
$var reg 4 R" y0 [3:0] $end
$var reg 4 S" y1 [3:0] $end
$var reg 4 T" y2 [3:0] $end
$var reg 4 U" y3 [3:0] $end
$var reg 4 V" y4 [3:0] $end
$var reg 4 W" y5 [3:0] $end
$var reg 4 X" y6 [3:0] $end
$upscope $end
$upscope $end
$scope module alu_src_mux $end
$var wire 32 Y" b [31:0] $end
$var wire 1 D s $end
$var wire 32 Z" c [31:0] $end
$var wire 32 [" a [31:0] $end
$upscope $end
$scope module branch_adder $end
$var wire 32 \" a [31:0] $end
$var wire 32 ]" b [31:0] $end
$var wire 32 ^" c [31:0] $end
$upscope $end
$scope module srca_mux $end
$var wire 32 _" a [31:0] $end
$var wire 32 `" c [31:0] $end
$var wire 2 a" s [1:0] $end
$var wire 32 b" d [31:0] $end
$var wire 32 c" b [31:0] $end
$upscope $end
$scope module srcb_mux $end
$var wire 32 d" a [31:0] $end
$var wire 32 e" c [31:0] $end
$var wire 2 f" s [1:0] $end
$var wire 32 g" d [31:0] $end
$var wire 32 h" b [31:0] $end
$upscope $end
$upscope $end
$scope module Fetch $end
$var wire 1 4 PCSrcE $end
$var wire 32 i" PCTargetE [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 j" PC_F [31:0] $end
$var wire 32 k" PCPlus4F [31:0] $end
$var wire 32 l" PCPlus4D [31:0] $end
$var wire 32 m" PCF [31:0] $end
$var wire 32 n" PCD [31:0] $end
$var wire 32 o" InstrF [31:0] $end
$var wire 32 p" InstrD [31:0] $end
$var reg 32 q" InstrF_reg [31:0] $end
$var reg 32 r" PCF_reg [31:0] $end
$var reg 32 s" PCPlus4F_reg [31:0] $end
$scope module IMEM $end
$var wire 1 " rst $end
$var wire 32 t" RD [31:0] $end
$var wire 32 u" A [31:0] $end
$upscope $end
$scope module PC_MUX $end
$var wire 32 v" b [31:0] $end
$var wire 1 4 s $end
$var wire 32 w" c [31:0] $end
$var wire 32 x" a [31:0] $end
$upscope $end
$scope module PC_adder $end
$var wire 32 y" b [31:0] $end
$var wire 32 z" c [31:0] $end
$var wire 32 {" a [31:0] $end
$upscope $end
$scope module Program_Counter $end
$var wire 32 |" PC_Next [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 32 }" PC [31:0] $end
$upscope $end
$upscope $end
$scope module Forwarding_block $end
$var wire 5 ~" RD_M [4:0] $end
$var wire 1 ) RegWriteM $end
$var wire 5 !# Rs1_E [4:0] $end
$var wire 5 "# Rs2_E [4:0] $end
$var wire 1 " rst $end
$var wire 1 ( RegWriteW $end
$var wire 5 ## RD_W [4:0] $end
$var wire 2 $# ForwardBE [1:0] $end
$var wire 2 %# ForwardAE [1:0] $end
$upscope $end
$scope module Memory $end
$var wire 32 &# ALU_ResultM [31:0] $end
$var wire 32 '# ALU_ResultW [31:0] $end
$var wire 1 ; MemWriteM $end
$var wire 32 (# PCPlus4M [31:0] $end
$var wire 32 )# PCPlus4W [31:0] $end
$var wire 5 *# RD_M [4:0] $end
$var wire 5 +# RD_W [4:0] $end
$var wire 32 ,# ReadDataW [31:0] $end
$var wire 1 ) RegWriteM $end
$var wire 1 ( RegWriteW $end
$var wire 1 & ResultSrcM $end
$var wire 1 % ResultSrcW $end
$var wire 32 -# WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 .# ReadDataM [31:0] $end
$var reg 32 /# ALU_ResultM_r [31:0] $end
$var reg 32 0# PCPlus4M_r [31:0] $end
$var reg 5 1# RD_M_r [4:0] $end
$var reg 32 2# ReadDataM_r [31:0] $end
$var reg 1 ( RegWriteM_r $end
$var reg 1 % ResultSrcM_r $end
$scope module dmem $end
$var wire 32 3# A [31:0] $end
$var wire 32 4# WD [31:0] $end
$var wire 1 ; WE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 5# RD [31:0] $end
$upscope $end
$upscope $end
$scope module WriteBack $end
$var wire 32 6# ALU_ResultW [31:0] $end
$var wire 32 7# PCPlus4W [31:0] $end
$var wire 32 8# ReadDataW [31:0] $end
$var wire 1 % ResultSrcW $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 9# ResultW [31:0] $end
$scope module result_mux $end
$var wire 32 :# a [31:0] $end
$var wire 32 ;# b [31:0] $end
$var wire 1 % s $end
$var wire 32 <# c [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 <#
b0 ;#
b0 :#
b0 9#
b0 8#
b0 7#
b0 6#
b0 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
b0 /#
b0 .#
b0 -#
b0 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
b0 ##
b0 "#
b0 !#
b0 ~"
bx }"
bx |"
bx {"
bx z"
b100 y"
bx x"
bx w"
b0 v"
bx u"
b0 t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b0 n"
bx m"
b0 l"
bx k"
bx j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
0D"
0C"
b0 B"
b0 A"
b0 @"
0?"
0>"
b0 ="
0<"
b0 ;"
b0 :"
b0 9"
b0 8"
07"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
1-"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
0i
0h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
0`
b0 _
b0 ^
b0 ]
0\
0[
b0 Z
b0 Y
b0 X
0W
b0 V
b0 U
b0 T
b0 S
b0 R
0Q
0P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
0D
b0 C
b0 B
0A
b0 @
b0 ?
b0 >
b0 =
0<
0;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
04
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
0*
0)
0(
0'
0&
0%
b0 $
b0 #
0"
1!
$end
#50
0!
#100
b100 j"
b100 w"
b100 |"
b100 k"
b100 x"
b100 z"
b0 m"
b0 u"
b0 {"
b0 }"
1!
#150
0!
#200
b10010001000010000000010101011 o"
b10010001000010000000010101011 t"
1"
1!
#250
0!
#300
b100 ]
b100 o
b100 t
b11 n
b11 s
b11 w
1Q
1\
b100100010 Y
b100100010 z
bx S
bx ~
bx T
bx !"
b1000001000001010010011 o"
b1000001000001010010011 t"
b10 |
b10 {
b1001 l
b1001 q
b101011 j
b101011 r
b101011 u
b1000 j"
b1000 w"
b1000 |"
b100 8
b100 U
b100 l"
b10010001000010000000010101011 =
b10010001000010000000010101011 X
b10010001000010000000010101011 y
b10010001000010000000010101011 p"
b1000 k"
b1000 x"
b1000 z"
b100 m"
b100 u"
b100 {"
b100 }"
b100 s"
b10010001000010000000010101011 q"
1!
#350
0!
#400
0-"
b100100010 2"
b100100010 B"
b0 ]
b0 o
b0 t
x?"
b0 n
b0 s
b0 w
1Q
1\
bx R"
bx S"
bx T"
bx U"
bx V"
bx W"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx @"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx G"
bx X"
b1 L"
b10 K"
b10 J"
b10 Y
b10 z
bx o"
bx t"
bx A"
bx Q"
bx P"
bx O"
bx N"
b100100010 /"
b100100010 E"
b100100010 H"
b100100010 Z"
b1 {
b0 l
b0 q
b10011 j
b10011 r
b10011 u
b1100 j"
b1100 w"
b1100 |"
bx ."
bx ["
bx g"
bx 0"
bx F"
bx I"
bx b"
b1000 8
b1000 U
b1000 l"
b100 :
b100 V
b100 n"
b1000001000001010010011 =
b1000001000001010010011 X
b1000001000001010010011 y
b1000001000001010010011 p"
b1100 k"
b1100 x"
b1100 z"
b1000 m"
b1000 u"
b1000 {"
b1000 }"
b10 ,
b10 N
b10 g
b10 "#
b10 -
b10 M
b10 f
b10 !#
b100 7
b100 I
b100 &"
b100 b
b1 /
b1 L
b1 *"
b1 e
b100100010 3
b100100010 3"
b100100010 ^"
b100100010 i"
b100100010 v"
b100100010 >
b100100010 G
b100100010 _
b100100010 $"
b100100010 Y"
b100100010 ]"
bx 1
bx K
bx d
bx )"
bx d"
bx 2
bx J
bx c
bx ("
bx _"
b100 E
b100 F
b100 ^
b100 #"
b100 ="
1D
1*
1h
b1000 s"
b100 r"
b1000001000001010010011 q"
1!
#450
0!
#500
0?"
b100 R"
b100 S"
b10 T"
b0 U"
b0 V"
b0 W"
b1001000100 @"
b1001000100 G"
b0 X"
xQ
x\
bx ]
bx o
bx t
b100100100 A"
b0 Q"
b1 P"
b10 O"
b10 N"
b100100010 0"
b100100010 F"
b100100010 I"
b100100010 b"
bx Y
bx z
bx Z
bx m
bx v
bx x
xW
xP
x[
bx n
bx s
bx w
b10 @
b10 5"
b10 a"
b10 %#
0C"
0-"
bx |
bx {
bx l
bx q
bx k
bx p
bx j
bx r
bx u
b0 L"
b0 K"
b100100100 2"
b100100100 B"
b10000 j"
b10000 w"
b10000 |"
b1100 8
b1100 U
b1100 l"
b1000 :
b1000 V
b1000 n"
bx =
bx X
bx y
bx p"
b10 /"
b10 E"
b10 H"
b10 Z"
bx .#
bx 5#
b10000 k"
b10000 x"
b10000 z"
b1100 m"
b1100 u"
b1100 {"
b1100 }"
b1100 s"
b1000 r"
bx q"
b1 -
b1 M
b1 f
b1 !#
b1000 7
b1000 I
b1000 &"
b1000 b
b100 9
b100 H
b100 a
b100 %"
b100 \"
b101 /
b101 L
b101 *"
b101 e
b110 3
b110 3"
b110 ^"
b110 i"
b110 v"
b10 >
b10 G
b10 _
b10 $"
b10 Y"
b10 ]"
b0 E
b0 F
b0 ^
b0 #"
b0 ="
b100100010 C
b100100010 6"
b100100010 ;"
b100100010 `"
b100100010 e"
b100100010 &#
b100100010 3#
bx #
bx ,"
bx -#
bx 4#
bx 9"
b100 6
b100 '"
b100 (#
b100 8"
b1 .
b1 +"
b1 :"
b1 ~"
b1 *#
1)
1!
#550
0!
#600
x?"
xC"
bx Q"
bx P"
bx O"
bx N"
x4
bx 0"
bx F"
bx I"
bx b"
bx ?
bx 4"
bx f"
bx $#
bx @
bx 5"
bx a"
bx %#
bx R"
bx S"
bx T"
bx U"
bx V"
bx W"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx @"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx G"
bx X"
x-"
bx A"
bx M"
bx L"
bx K"
bx J"
bx 2"
bx B"
bx j"
bx w"
bx |"
b100100010 $
b100100010 O
b100100010 }
b100100010 1"
b100100010 c"
b100100010 h"
b100100010 9#
b100100010 <#
bx /"
bx E"
bx H"
bx Z"
b10000 8
b10000 U
b10000 l"
b1100 :
b1100 V
b1100 n"
b10100 k"
b10100 x"
b10100 z"
b10000 m"
b10000 u"
b10000 {"
b10000 }"
bx +
bx ,#
bx 2#
bx 8#
bx ;#
b100100010 B
b100100010 '#
b100100010 /#
b100100010 6#
b100100010 :#
b100 5
b100 )#
b100 7#
b100 0#
b1 0
b1 R
b1 ""
b1 ##
b1 +#
b1 1#
1(
b100100100 C
b100100100 6"
b100100100 ;"
b100100100 `"
b100100100 e"
b100100100 &#
b100100100 3#
b1000 6
b1000 '"
b1000 (#
b1000 8"
b101 .
b101 +"
b101 :"
b101 ~"
b101 *#
bx ,
bx N
bx g
bx "#
bx -
bx M
bx f
bx !#
b1100 7
b1100 I
b1100 &"
b1100 b
b1000 9
b1000 H
b1000 a
b1000 %"
b1000 \"
bx /
bx L
bx *"
bx e
bx 3
bx 3"
bx ^"
bx i"
bx v"
bx >
bx G
bx _
bx $"
bx Y"
bx ]"
bx E
bx F
bx ^
bx #"
bx ="
xA
x'
xi
x<
x`
xD
x*
xh
b10000 s"
b1100 r"
1!
#650
0!
#700
b10100 8
b10100 U
b10100 l"
b10000 :
b10000 V
b10000 n"
b100100100 $
b100100100 O
b100100100 }
b100100100 1"
b100100100 c"
b100100100 h"
b100100100 9#
b100100100 <#
bx k"
bx x"
bx z"
bx m"
bx u"
bx {"
bx }"
b10100 s"
b10000 r"
b10000 7
b10000 I
b10000 &"
b10000 b
b1100 9
b1100 H
b1100 a
b1100 %"
b1100 \"
bx C
bx 6"
bx ;"
bx `"
bx e"
bx &#
bx 3#
b1100 6
b1100 '"
b1100 (#
b1100 8"
bx .
bx +"
bx :"
bx ~"
bx *#
x&
x<"
x;
x7"
x)
b100100100 B
b100100100 '#
b100100100 /#
b100100100 6#
b100100100 :#
b1000 5
b1000 )#
b1000 7#
b1000 0#
b101 0
b101 R
b101 ""
b101 ##
b101 +#
b101 1#
1!
#750
0!
#800
bx $
bx O
bx }
bx 1"
bx c"
bx h"
bx 9#
bx <#
bx 8
bx U
bx l"
bx :
bx V
bx n"
bx B
bx '#
bx /#
bx 6#
bx :#
b1100 5
b1100 )#
b1100 7#
b1100 0#
bx 0
bx R
bx ""
bx ##
bx +#
bx 1#
x%
x(
b10000 6
b10000 '"
b10000 (#
b10000 8"
b10100 7
b10100 I
b10100 &"
b10100 b
b10000 9
b10000 H
b10000 a
b10000 %"
b10000 \"
bx s"
bx r"
1!
#850
0!
#900
bx 7
bx I
bx &"
bx b
bx 9
bx H
bx a
bx %"
bx \"
b10100 6
b10100 '"
b10100 (#
b10100 8"
b10000 5
b10000 )#
b10000 7#
b10000 0#
1!
#950
0!
#1000
b10100 5
b10100 )#
b10100 7#
b10100 0#
bx 6
bx '"
bx (#
bx 8"
1!
#1050
0!
#1100
bx 5
bx )#
bx 7#
bx 0#
1!
#1150
0!
#1200
1!
#1250
0!
#1300
1!
#1350
0!
#1400
1!
#1450
0!
#1500
1!
#1550
0!
#1600
1!
#1650
0!
#1700
1!
#1750
0!
#1800
1!
#1850
0!
#1900
1!
#1950
0!
#2000
1!
#2050
0!
#2100
1!
#2150
0!
#2200
1!
#2250
0!
#2300
1!
#2350
0!
#2400
1!
#2450
0!
#2500
1!
#2550
0!
#2600
1!
#2650
0!
#2700
1!
#2750
0!
#2800
1!
#2850
0!
#2900
1!
#2950
0!
#3000
1!
#3050
0!
#3100
1!
#3150
0!
#3200
1!
#3250
0!
#3300
1!
#3350
0!
#3400
1!
#3450
0!
#3500
1!
#3550
0!
#3600
1!
#3650
0!
#3700
1!
#3750
0!
#3800
1!
#3850
0!
#3900
1!
#3950
0!
#4000
1!
#4050
0!
#4100
1!
#4150
0!
#4200
1!
#4250
0!
#4300
1!
#4350
0!
#4400
1!
#4450
0!
#4500
1!
#4550
0!
#4600
1!
#4650
0!
#4700
1!
#4750
0!
#4800
1!
#4850
0!
#4900
1!
#4950
0!
#5000
1!
#5050
0!
#5100
1!
#5150
0!
#5200
1!
